{"version":3,"file":"index.mjs","sources":["../build/event-bus.mjs","../build/with-event-bus.mjs"],"sourcesContent":["class EventBus {\n    constructor() {\n        if (globalThis.__ficusjs__ && globalThis.__ficusjs__.eventBus) {\n            return globalThis.__ficusjs__.eventBus;\n        }\n        this.subscribers = {};\n        globalThis.__ficusjs__ = globalThis.__ficusjs__ || {};\n        globalThis.__ficusjs__.eventBus = globalThis.__ficusjs__.eventBus || this;\n    }\n    /**\n     * Return a list of subscribers for a topic. If no topic is passed, all subscribers are returned\n     * @method\n     * @param topic\n     * @returns {Map|object} A Map of subscribers for a topic or object of all subscribers for all topics\n     */\n    getSubscribers(topic) {\n        return topic ? this.subscribers[topic] : this.subscribers;\n    }\n    /**\n     * Subscribe to a topic\n     *\n     * @method\n     * @param {string} topic\n     * @param {function} callback\n     * @param {object} options\n     * @returns {number} A count of callbacks for this topic\n     */\n    subscribe(topic, callback, options = {}) {\n        const self = this;\n        const opts = Object.assign({ callCount: 0, fireOnce: false }, options);\n        // If there's not already an topic with this name set in our collection\n        // go ahead and create a new one and set it with an empty array, so we don't\n        // have to type check it later down-the-line\n        if (!self.subscribers[topic]) {\n            self.subscribers[topic] = new Map();\n        }\n        // create an unsubscribe function\n        const unsubscribe = () => {\n            const newItems = new Map();\n            self.subscribers[topic].forEach((v, k) => k !== callback && newItems.set(k, v));\n            self.subscribers[topic] = newItems;\n        };\n        // add the callback to the map\n        self.subscribers[topic].set(callback, opts);\n        return unsubscribe;\n    }\n    /**\n     * Publish a message to a topic\n     *\n     * @method\n     * @param {string} topic\n     * @param {object} data\n     * @returns {Map} The subscribers notified by this topic\n     */\n    publish(topic, data) {\n        const self = this;\n        // There's no topic to publish to, so bail out\n        if (!self.subscribers[topic]) {\n            return [];\n        }\n        // Get each subscription and call its callback with the passed data\n        const published = new Map();\n        self.subscribers[topic].forEach((opts, callback) => {\n            if (opts.fireOnce && opts.callCount === 1)\n                return;\n            callback(data);\n            ++opts.callCount;\n            published.set(callback, opts);\n        });\n        return published;\n    }\n}\n/**\n * Function to create an EventBus instance\n * @returns {EventBus}\n */\nexport function createEventBus() {\n    return new EventBus();\n}\n/**\n * Function to get the running EventBus instance\n * @returns {EventBus}\n */\nexport function getEventBus() {\n    return createEventBus();\n}\n","// TODO: I was not able to set the options' type to CustomElementOptions, not sure why.\n// Then in with-event-bus.d.ts the withEventBus function accepts two generics, and only one is passed to CustomElementOptions\n// but if I try to do the same, typescript complains because CustomElementOptions needs to have two generics\nexport function withEventBus(eventBus, options) {\n    return Object.assign(Object.assign({}, options), { created() {\n            this.setEventBus(eventBus);\n            if (options.created)\n                options.created.call(this);\n        },\n        mounted() {\n            this._subscribeToEventBus();\n            if (options.mounted)\n                options.mounted.call(this);\n        },\n        updated() {\n            this._subscribeToEventBus();\n            if (options.updated)\n                options.updated.call(this);\n        },\n        removed() {\n            this._unsubscribeFromEventBus();\n            if (options.removed)\n                options.removed.call(this);\n        },\n        setEventBus(eventBus) {\n            const self = this;\n            self._eventBus = eventBus;\n            self._eventSubscriptions = {};\n            self.eventBus = {\n                subscribe(event, callback, options) {\n                    self._eventSubscriptions[event] = { unsubscribe: self._eventBus.subscribe(event, callback, options), callback, options };\n                    return function () {\n                        const { unsubscribe } = self._eventSubscriptions[event];\n                        unsubscribe && unsubscribe();\n                        self._eventSubscriptions[event].unsubscribe = null;\n                    };\n                },\n                publish(event, data = {}) {\n                    // TODO: in the docs I can see that eventBus.publish() returns a map of subscribers, but in this case\n                    // it returns void, should we add a return statement in this function as well?\n                    self._eventBus.publish(event, data);\n                },\n                getSubscribers(topic) {\n                    return self._eventBus.getSubscribers(topic);\n                }\n            };\n        },\n        _subscribeToEventBus() {\n            for (const k in this._eventSubscriptions) {\n                const { unsubscribe, callback, options } = this._eventSubscriptions[k];\n                if (!unsubscribe) {\n                    this._eventSubscriptions[k].unsubscribe = this._eventBus.subscribe(k, callback, options);\n                }\n            }\n        },\n        _unsubscribeFromEventBus() {\n            for (const k in this._eventSubscriptions) {\n                const { unsubscribe } = this._eventSubscriptions[k];\n                unsubscribe && unsubscribe();\n                this._eventSubscriptions[k].unsubscribe = null;\n            }\n        } });\n}\n"],"names":["EventBus","constructor","globalThis","__ficusjs__","eventBus","this","subscribers","getSubscribers","topic","subscribe","callback","options","self","opts","Object","assign","callCount","fireOnce","Map","set","newItems","forEach","v","k","publish","data","published","createEventBus","getEventBus","withEventBus","created","setEventBus","call","mounted","_subscribeToEventBus","updated","removed","_unsubscribeFromEventBus","_eventBus","_eventSubscriptions","event","unsubscribe"],"mappings":"AAAA,MAAMA,EACFC,cACI,GAAIC,WAAWC,aAAeD,WAAWC,YAAYC,SACjD,OAAOF,WAAWC,YAAYC,SAElCC,KAAKC,YAAc,GACnBJ,WAAWC,YAAcD,WAAWC,aAAe,CAAA,EACnDD,WAAWC,YAAYC,SAAWF,WAAWC,YAAYC,UAAYC,IACxE,CAODE,eAAeC,GACX,OAAOA,EAAQH,KAAKC,YAAYE,GAASH,KAAKC,WACjD,CAUDG,UAAUD,EAAOE,EAAUC,EAAU,CAAA,GACjC,MAAMC,EAAOP,KACPQ,EAAOC,OAAOC,OAAO,CAAEC,UAAW,EAAGC,UAAU,GAASN,GAIzDC,EAAKN,YAAYE,KAClBI,EAAKN,YAAYE,GAAS,IAAIU,KAUlC,OADAN,EAAKN,YAAYE,GAAOW,IAAIT,EAAUG,GANlB,KAChB,MAAMO,EAAW,IAAIF,IACrBN,EAAKN,YAAYE,GAAOa,SAAQ,CAACC,EAAGC,IAAMA,IAAMb,GAAYU,EAASD,IAAII,EAAGD,KAC5EV,EAAKN,YAAYE,GAASY,CAAQ,CAKzC,CASDI,QAAQhB,EAAOiB,GAGX,IAFapB,KAEHC,YAAYE,GAClB,MAAO,GAGX,MAAMkB,EAAY,IAAIR,IAQtB,OAdab,KAORC,YAAYE,GAAOa,SAAQ,CAACR,EAAMH,KAC/BG,EAAKI,UAA+B,IAAnBJ,EAAKG,YAE1BN,EAASe,KACPZ,EAAKG,UACPU,EAAUP,IAAIT,EAAUG,GAAK,IAE1Ba,CACV,EAME,SAASC,iBACZ,OAAO,IAAI3B,CACf,CAKO,SAAS4B,cACZ,OAAOD,gBACX,CClFO,SAASE,aAAazB,EAAUO,GACnC,OAAOG,OAAOC,OAAOD,OAAOC,OAAO,CAAA,EAAIJ,GAAU,CAAEmB,UAC3CzB,KAAK0B,YAAY3B,GACbO,EAAQmB,SACRnB,EAAQmB,QAAQE,KAAK3B,KAC5B,EACD4B,UACI5B,KAAK6B,uBACDvB,EAAQsB,SACRtB,EAAQsB,QAAQD,KAAK3B,KAC5B,EACD8B,UACI9B,KAAK6B,uBACDvB,EAAQwB,SACRxB,EAAQwB,QAAQH,KAAK3B,KAC5B,EACD+B,UACI/B,KAAKgC,2BACD1B,EAAQyB,SACRzB,EAAQyB,QAAQJ,KAAK3B,KAC5B,EACD0B,YAAY3B,GACR,MAAMQ,EAAOP,KACbO,EAAK0B,UAAYlC,EACjBQ,EAAK2B,oBAAsB,GAC3B3B,EAAKR,SAAW,CACZK,UAAS,CAAC+B,EAAO9B,EAAUC,KACvBC,EAAK2B,oBAAoBC,GAAS,CAAEC,YAAa7B,EAAK0B,UAAU7B,UAAU+B,EAAO9B,EAAUC,GAAUD,WAAUC,WACxG,WACH,MAAM8B,YAAEA,GAAgB7B,EAAK2B,oBAAoBC,GACjDC,GAAeA,IACf7B,EAAK2B,oBAAoBC,GAAOC,YAAc,IACtE,GAEgBjB,QAAQgB,EAAOf,EAAO,IAGlBb,EAAK0B,UAAUd,QAAQgB,EAAOf,EACjC,EACDlB,eAAeC,GACJI,EAAK0B,UAAU/B,eAAeC,GAGhD,EACD0B,uBACI,IAAK,MAAMX,KAAKlB,KAAKkC,oBAAqB,CACtC,MAAME,YAAEA,EAAW/B,SAAEA,EAAQC,QAAEA,GAAYN,KAAKkC,oBAAoBhB,GAC/DkB,IACDpC,KAAKkC,oBAAoBhB,GAAGkB,YAAcpC,KAAKiC,UAAU7B,UAAUc,EAAGb,EAAUC,GAEvF,CACJ,EACD0B,2BACI,IAAK,MAAMd,KAAKlB,KAAKkC,oBAAqB,CACtC,MAAME,YAAEA,GAAgBpC,KAAKkC,oBAAoBhB,GACjDkB,GAAeA,IACfpC,KAAKkC,oBAAoBhB,GAAGkB,YAAc,IAC7C,CACJ,GACT"}